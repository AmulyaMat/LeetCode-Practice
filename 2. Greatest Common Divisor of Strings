# For two strings s and t, we say "t divides s" if and only if s = t + t + t + ... + t + t (i.e., t is concatenated with itself one or more times).
# Given two strings str1 and str2, return the largest string x such that x divides both str1 and str2.

from math import gcd

class Solution:
    def gcdOfStrings(self, str1: str, str2: str) -> str

## ACTUAL SOLUTION ########################################

        if str1 + str2 != str2 + str1:
            return ""

        else:
            return str1[:gcd(len(str1), len(str2))]

## MY ATTEMPT #############################################

        # word1_list = []
        # word1_list[:] = str1

        # word2_list = []
        # word2_list[:] = str2

        # common_list = []

        # min_indices = min(len(word1_list), len(word2_list))

        # for i in range(min_indices):
        #     if (word1_list[i] == word2_list[i]) or (word2_list[i] == word1_list[i]):
        #         if word1_list[i] not in common_list:
        #             common_list.append(word1_list[i])

        # common_word = ''.join(common_list)

        # return common_word
