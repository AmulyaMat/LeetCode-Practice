# Given two strings s and t, return true if s is a subsequence of t, or false otherwise.

# A subsequence of a string is a new string that is formed from the original string by deleting some (can be none) of the characters without 

# disturbing the relative positions of the remaining characters. (i.e., "ace" is a subsequence of "abcde" while "aec" is not).


class Solution:
    def isSubsequence(self, s: str, t: str) -> bool:
            
            s_list = list(s)
            t_list = list(t)

            i = 0
            j = 0

            # iterate over letters in t, and try to match with letters in s
            while i < len(s) and j < len(t):
                if t[j] == s[i]:
                    i += 1        # if condition is true, move pointer of s by 1, otherwise the pointer stays there
                j += 1   # pointer of t should keep moving as the iteration is over lengthof t (longer word)

            return i == len(s)    # if the iteration of t is over, and 'i' has not reached the end of s
